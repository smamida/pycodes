import json
import boto3
import logging
import os


logger = logging.getLogger()
logger.setLevel(logging.INFO)

def check_secret(client,secretname):
    try:
        secrets =client.list_secrets()
        secret_exists = any(secret['Name'] == secret_name for secret in secrets['SecretList'])
        logger.info(f'the secret_exists{secret_exists}')
        return secret_exists   
    except BaseException as e:
        logger.error(f'the secret_exists{secret_exists}')
        return secret_exists
def update_principles(client,secret_name,allowed_principles):
    # Describe the secret to get details
    try:
        secret_description = client.describe_secret(SecretId=secret_name)
        logger.info(f"Described secret {secret_name} successfully")
        policy = {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "secretsmanager:GetSecretValue",
                    "Resource": f"arn:aws:secretsmanager:{region_s}:{account_no}:secret:{secret_name}",
                    "Condition": {
                        "StringNotEquals": {
                            "aws:PrincipalArn": allowed_principles
                        }
                    }
                }
            ]
        }
        response = client.put_resource_policy(
            SecretId=secret_name,
            ResourcePolicy=json.dumps(policy)
        )
        return response
    except BaseException as e:
        print(e)
        raise Exception(f"error occured during updating policy, {str(e)}")



def lambda_handler(event, context):
    print("event",event)
    
    Secret_client = boto3.client('secretsmanager')
    #secret_name = "hanu"
    #allowed_principles ="arn:aws:iam::account_id:role/role4"
    secret_name = event.get('secret_name')
    allowed_priciples = event.get('allowed_priciples')
   # print("ab",allowed_principles)
    check_secret= check_if_secret_exist(client=Secret_client,secret_name=secret_name)
    if check_secret:
        update_policy =update_principles(Secret_client,secret_name,allowed_priciples)
        logger.info(f'update policy completed, {str(update_policy)}')
        
    else:
        logger.error(f'Error while listing the secret_name {str(check_secret)}')
        
        
                        
                       
