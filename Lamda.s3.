S3--------------

import json
import urllib.parse
import boto3

dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('sample_table')


def lambda_handler(event, context):
    s3 = boto3.client('s3')
    copy_source = {
        'Bucket': 'hanu234',
        'Key': 'newfile1.txt'
    }
#s3.meta.client.copy(newfile1.txt, 're6969', 'newtxt.txt')
    a = s3.list_objects(Bucket='re6969')
    b = (a['Contents'][0]['Key'])
    dynamodb_item = {'t': b}
    table.put_item(Item=dynamodb_item)





----------------------------
creation of folder

amimport json
import boto3

def lambda_handler(event, context):
    s3 = boto3.client('s3')
    a= s3.list_objects(Bucket='hanu234',Prefix='newfolder')
    print(a) 

-------------------------------------------------------

creation of bucket in S3

import json
import boto3

def lambda_handler(event, context):
    s3 = boto3.client('s3')

    bucket_name = 'hanu9806'

    try:
        s3.create_bucket(Bucket=bucket_name,CreateBucketConfiguration={'LocationConstraint':'ap-south-1'})
        print(f"Bucket '{bucket_name}' was successfully created.")

        response = s3.head_bucket(Bucket=bucket_name)
        print(f"Bucket '{bucket_name}' exists and is accessible.")
    except Exception as e:
        print(f"An error occurred while creating the bucket: {e}")

------------------------------------------------------------------------
transering s3 file from lambda to dynamo db

import json
import urllib.parse
import boto3

dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('sample_table')


def lambda_handler(event, context):
    s3 = boto3.client('s3')
    copy_source = {
        'Bucket': 'hanu234',
        'Key': 'newfile1.txt'
    }
#s3.meta.client.copy(newfile1.txt, 're6969', 'newtxt.txt')
    a = s3.list_objects(Bucket='re6969')
    b = (a['Contents'][0]['Key'])
    dynamodb_item = {'t': b}
    table.put_item(Item=dynamodb_item)
















-----------------------------------------------

import json

def lambda_handler(event, context):
    # TODO implement
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
----------------------------------------------------------
ec2 creation in lambda


import boto3

def lambda_handler(event, context):
    ec2 = boto3.client('ec2')
    
    # Define the EC2 instance parameters
    instance_params = {
        'ImageId': 'ami-0cc9838aa7ab1dce7',  # Replace with a valid AMI ID
        'InstanceType': 't2.micro',
        'MinCount': 1,
        'MaxCount': 1,
        'KeyName': 'Kaha',  # Replace with your key pair name
        'SecurityGroupIds': ['sg-02c7d3286071f026b'],  # Replace with your security group ID
        'SubnetId': 'subnet-06483a30f118d1767',  # Replace with your subnet ID
    }
    
    try:
        # Create the EC2 instance
        response = ec2.run_instances(**instance_params)
        
        # Extract instance ID
        instance_id = response['Instances'][0]['InstanceId']
        
        return {
            'statusCode': 200,
            'body': f'EC2 Instance {instance_id} created successfully'
        }
    
    except Exception as e:
        return {
            'statusCode': 500,
            'body': f'Error creating EC2 instance: {str(e)}'
        }
















---------------------------------------------------------
json- task 

import json

# Sample JSON string with corrected syntax
details_of_things = '''
{
  "Mobiles": {
    "Srikanth": "12pro max",
    "MPR": "15",
    "MPREDDY": "15mini",
    "Prashanth": "15pro",
    "Sreelaxmi": "14promax"
  },
  "Cars": [
    {"Srikanth": "3Polo"},
    {"Prashanth": "Highlander"},
    {"Sreelaxmi": "Model3"},
    {"pra1":"3model"}
  ]
}
'''
models = json.loads(details_of_things)
model =input("enter the value")

for key,value in models.items(): #Iterate over key-value pairs in the dictionar
    if key == "Mobiles":
        for names,Mobiles in value.items():
            if model in Mobiles:
                   print(f"{names}'s mobiles is {Mobiles}")
            #else :
              #  print(" model are not avaliable")




Car=input("enter the car model")


for key, value in models.items():
    if key == "Cars":
       for val in value:
            for name, car_model in val.items():
                if Car in car_model:
                    print(f"{name} drives a {car_model}")
                    break
                #else:
                  #  print ("please enter the correct value")




"""
for key,value in models.items():# checking the key and values in json
    if key == "Cars": # keys is equal to cars
        for names,cars in value.items():
            if car in "cars":

for key, value in models.items():  # Iterate over key-value pairs in the dictionary
    if key == "Cars":  # Check if the key is "Cars"
        for car in value:  # Iterate over the list of cars
            if Car in Cars:  # Check if the specified car is in the current car's details
                print(f"{item['name']} drives a {item['Car']}")"""
#Car = "3"  # Specify the car model you want to search for

